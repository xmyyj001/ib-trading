# /home/app/main.py

from contextlib import asynccontextmanager
from datetime import datetime
import json
import logging
from fastapi import FastAPI, Request, Response

# 确保所有 intent 类都被导入
from intents.allocation import Allocation
from intents.cash_balancer import CashBalancer
from intents.close_all import CloseAll
from intents.collect_market_data import CollectMarketData
from intents.intent import Intent
from intents.summary import Summary
from intents.trade_reconciliation import TradeReconciliation
from intents.reconcile import Reconcile
from strategies.test_signal_generator import TestSignalGenerator
from lib.environment import Environment

# --- FastAPI App Definition (无 Lifespan) ---
logging.basicConfig(level=logging.INFO)
app = FastAPI()

INTENTS = {
    'allocation': Allocation,
    'cash-balancer': CashBalancer,
    'close-all': CloseAll,
    'collect-market-data': CollectMarketData,
    'summary': Summary,
    'trade-reconciliation': TradeReconciliation,
    'reconcile': Reconcile,
    'testsignalgenerator': TestSignalGenerator
}

# --- API Routes (恢复为 async def) ---
@app.get("/{intent}")
@app.post("/{intent}")
async def handle_intent(intent: str, request: Request):
    body = {}
    if request.method == 'POST' and request.headers.get('content-length'):
        try:
            body = await request.json()
        except json.JSONDecodeError:
            return Response(content=json.dumps({"error": "Invalid JSON body"}), media_type="application/json", status_code=400)

    result = {}
    status_code = 500
    env = None # 确保 env 在 try 块外可见
    try:
        if intent not in INTENTS:
            raise ValueError(f"Unknown intent received: {intent}")
        
        # 1. 在 async 端点内部创建 Environment
        env = Environment()
        
        # 2. 注入 env 并创建 intent
        intent_instance = INTENTS[intent](env=env, **body)
        
        # 3. 直接 await 异步的 run 方法
        result = await intent_instance.run()
        status_code = 200
    except Exception as e:
        # 如果 env 已经创建，使用它的 logger
        logger = env.logging if env else logging
        logger.exception("An error occurred while processing the intent:")
        error_str = f'{e.__class__.__name__}: {e}'
        result = {'error': error_str}

    result['utcTimestamp'] = datetime.utcnow().isoformat()
    return Response(
        content=json.dumps(result, default=str) + '\n',
        media_type="application/json",
        status_code=status_code
    )
