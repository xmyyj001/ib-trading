# ===================================================================
# == RECOMMENDED VERSION: cloud-run/application/cloudbuild.yaml
# ===================================================================

steps:
  # 步骤 1: 拉取最新的 base 镜像，确保我们基于最新的依赖进行构建
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Pull-Latest-Base'
    args: ['pull', 'europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/base:latest']

  # 步骤 2: 构建 application 镜像
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build-Application'
    args:
      - 'build'
      - '--tag'
      - 'europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${_MY_IMAGE_TAG}'
      - 'cloud-run/application' # Dockerfile 上下文
      - '--file'
      - 'cloud-run/application/Dockerfile'
    waitFor: ['Pull-Latest-Base']

  # 步骤 3: 推送 application 镜像
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push-Application'
    args: ['push', 'europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${_MY_IMAGE_TAG}']
    waitFor: ['Build-Application']

  # 步骤 4: 运行测试 (如果需要，这里是放置测试步骤的地方)
  # ... 你的单元测试和集成测试步骤可以放在这里，引用刚构建的镜像 ...

  # 步骤 5: 部署到 Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud' # 使用完整的 gcloud 镜像更稳妥
    id: 'Deploy-to-Cloud-Run'
    args:
      - 'run'
      - 'deploy'
      - 'ib-${_TRADING_MODE}'
      - '--image'
      - 'europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${_MY_IMAGE_TAG}'
      - '--region'
      - '${_GCP_REGION}'
      - '--platform'
      - 'managed'
      - '--max-instances'
      - '1'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--service-account'
      - 'ib-trading@${PROJECT_ID}.iam.gserviceaccount.com'
      - '--set-env-vars=PROJECT_ID=${PROJECT_ID},TRADING_MODE=${_TRADING_MODE}'
      - '--update-secrets=IB_CREDENTIALS_JSON=${_TRADING_MODE}:latest'
    # 确保在推送镜像之后再部署
    waitFor: ['Push-Application']

  # ... 你的清理步骤可以保留在这里 ...

# 替换变量
substitutions:
  _GCP_REGION: asia-east1
  _TRADING_MODE: paper
  _KEEP: "3"
  _MY_IMAGE_TAG: "latest" # 默认值，可以被命令行覆盖

timeout: "1200s"