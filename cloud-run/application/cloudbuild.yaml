steps:
#### build and push Docker image if not existing yet
- name: "google/cloud-sdk:slim"
  entrypoint: "bash"
  args:
  - "-c"
  - |
    # Configure Docker to authenticate with Artifact Registry
    gcloud auth configure-docker europe-docker.pkg.dev --quiet
    
    # Define shell variables. 
    # `${PROJECT_ID}` and `${SHORT_SHA}` are substituted by Cloud Build before bash runs.
    # The shell variables themselves (IMAGE_NAME_SVAR, etc.) are for bash.
    # Bash will see: IMAGE_NAME_SVAR="europe-docker.pkg.dev/actual-project-id/cloud-run-repo/application"
    IMAGE_NAME_SVAR="europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application"
    # Bash will see: IMAGE_TAG_SVAR="actual-short-sha"
    IMAGE_TAG_SVAR="${SHORT_SHA}"
    
    # When Cloud Build processes the line below, it sees $${IMAGE_NAME_SVAR} and $${IMAGE_TAG_SVAR}.
    # It converts $$ to $, so bash sees: FULL_IMAGE_NAME_SVAR="$IMAGE_NAME_SVAR:$IMAGE_TAG_SVAR"
    # Bash then expands its $IMAGE_NAME_SVAR and $IMAGE_TAG_SVAR.
    FULL_IMAGE_NAME_SVAR="$${IMAGE_NAME_SVAR}:$${IMAGE_TAG_SVAR}"

    echo "Checking if image $${FULL_IMAGE_NAME_SVAR} exists..."
    # Similarly, here Cloud Build converts $$ to $, so bash sees the shell variables for expansion.
    if ! gcloud artifacts docker images list "$${IMAGE_NAME_SVAR}" --filter="tags~'^$${IMAGE_TAG_SVAR}$'" --format="value(tags)" | grep -q "^$${IMAGE_TAG_SVAR}$"; then
      echo "Image $${FULL_IMAGE_NAME_SVAR} not found. Building and pushing..."
      docker build -t "$${FULL_IMAGE_NAME_SVAR}" cloud-run/application/
      docker push "$${FULL_IMAGE_NAME_SVAR}"
      echo "Image $${FULL_IMAGE_NAME_SVAR} built and pushed."
    else
      echo "Image $${FULL_IMAGE_NAME_SVAR} already exists. Skipping build and push."
    fi

#### run safety check
- name: "gcr.io/cloud-builders/docker"
  args:
  - "run"
  - "--entrypoint"
  - "bash"
  - "europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${SHORT_SHA}" # These are CB subs, no $$ needed
  - "-c"
  - "pip install safety && safety check --bare || true"

#### run unittests
- name: "gcr.io/cloud-builders/docker"
  args:
  - "run"
  - "--entrypoint"
  - "python"
  - "europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${SHORT_SHA}" # CB subs
  - "-m"
  - "unittest"
  - "discover"
  - "-p"
  - "test_*.py"

#### run integration tests
- name: "gcr.io/cloud-builders/docker"
  args:
  - "run"
  - "--network"
  - "cloudbuild"
  - "--env"
  - "PYTHONPATH=/home"
  - "--env"
  - "PROJECT_ID=${PROJECT_ID}" # CB sub
  - "--env"
  - "K_REVISION=cloudbuild"
  - "--entrypoint"
  - "bash"
  - "europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${SHORT_SHA}" # CB subs
  - "-c"
  - "/usr/bin/Xvfb :0 -ac -screen 0 1024x768x16 +extension RANDR & export DISPLAY=:0 && python ./_tests/integration_tests.py"

#### deploy new revision
- name: 'gcr.io/cloud-builders/gcloud-slim'
  args:
  - "run"
  - "deploy"
  - "ib-${_TRADING_MODE}" # CB sub
  - "--image"
  - "europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${SHORT_SHA}" # CB subs
  - "--region"
  - "${_GCP_REGION}" # CB sub
  - "--platform"
  - "managed"
  - "--max-instances"
  - "1"
  - "--memory"
  - "2Gi"
  - "--service-account"
  - "ib-trading@${PROJECT_ID}.iam.gserviceaccount.com" # CB sub
  - "--revision-suffix"
  - "${SHORT_SHA}" # CB sub
  - "--update-labels"
  - "app=ib-trading,trading-mode=${_TRADING_MODE}" # CB sub
  - "--update-env-vars"
  - "PROJECT_ID=${PROJECT_ID},TRADING_MODE=${_TRADING_MODE}" # CB subs

#### delete old revision(s)
- name: "gcr.io/cloud-builders/gcloud-slim"
  entrypoint: "bash"
  args:
  - "-c"
  - |
    set -e 
    # Cloud Build substitutions like ${_KEEP}, ${_TRADING_MODE}, ${_GCP_REGION}, ${PROJECT_ID}, ${SHORT_SHA}
    # are replaced by Cloud Build before bash sees the script.
    # Shell variables defined and used within this script need '$$' for expansion.
    if [[ "${_KEEP}" -gt "0" ]]; then
      echo "Cleaning up old revisions for service ib-${_TRADING_MODE} in region ${_GCP_REGION}, keeping last ${_KEEP} active revisions..."
      
      ALL_REVISIONS_ARR=($(gcloud run revisions list \
        --service="ib-${_TRADING_MODE}" \
        --platform="managed" \
        --region="${_GCP_REGION}" \
        --filter="metadata.labels.trading-mode=${_TRADING_MODE}" \
        --sort-by="~metadata.creationTimestamp" \
        --format="value(metadata.name)"))

      echo "Found revisions: $${ALL_REVISIONS_ARR[@]}"

      SHELL_RE_NUM='^[0-9]+$'
      if ! [[ "${_KEEP}" =~ $$SHELL_RE_NUM ]] ; then # $$SHELL_RE_NUM for bash to expand SHELL_RE_NUM
         echo "Error: _KEEP is not a number" >&2; exit 1
      fi

      REVISIONS_TO_DELETE_ARR=()
      if [ "$${#ALL_REVISIONS_ARR[@]}" -gt "${_KEEP}" ]; then
        REVISIONS_TO_DELETE_ARR=($${ALL_REVISIONS_ARR[@]:$_KEEP})
      fi

      if [ "$${#REVISIONS_TO_DELETE_ARR[@]}" -gt 0 ]; then
        echo "The following revisions will be deleted: $${REVISIONS_TO_DELETE_ARR[@]}"
        for shell_revision_var in "$${REVISIONS_TO_DELETE_ARR[@]}"; do
          echo "Deleting revision: $${shell_revision_var}"
          yes | gcloud run revisions delete "$${shell_revision_var}" --platform="managed" --region="${_GCP_REGION}" --quiet
        done
      else
        echo "No old revisions to delete beyond the _KEEP=${_KEEP} limit."
      fi

      echo "Cleaning up unused Docker image tags..."
      ACTIVE_REVISION_TAGS_ARR=()
      for shell_rev_name_var in "$${ALL_REVISIONS_ARR[@]:0:$_KEEP}"; do
        shell_img_url_var=$(gcloud run revisions describe "$${shell_rev_name_var}" --platform="managed" --region="${_GCP_REGION}" --format="value(spec.template.spec.containers[0].image)")
        shell_tag_var=$(echo "$${shell_img_url_var}" | rev | cut -d: -f1 | rev)
        if [[ -n "$${shell_tag_var}" && "$${shell_tag_var}" != "latest" ]]; then
             ACTIVE_REVISION_TAGS_ARR+=("$${shell_tag_var}")
        fi
      done
      
      # ${SHORT_SHA} is a Cloud Build substitution, so it's directly available to bash after CB processing.
      # Here we are comparing elements of a bash array $${ACTIVE_REVISION_TAGS_ARR[@]} with the value of ${SHORT_SHA}
      if [[ ! " $${ACTIVE_REVISION_TAGS_ARR[@]} " =~ " ${SHORT_SHA} " ]]; then
        ACTIVE_REVISION_TAGS_ARR+=("${SHORT_SHA}") # Add the CB resolved SHORT_SHA to the bash array
      fi
      
      ACTIVE_REVISION_TAGS_UNIQUE_ARR=($(echo "$${ACTIVE_REVISION_TAGS_ARR[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
      echo "Active or recent revision tags to keep: $${ACTIVE_REVISION_TAGS_UNIQUE_ARR[@]}"

      ALL_IMAGE_TAGS_ARR=($(gcloud artifacts docker images list "europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application" --format="value(tags)" --filter="tags:*"))
      echo "All image tags in repository: $${ALL_IMAGE_TAGS_ARR[@]}"

      for shell_tag_iter_var in $${ALL_IMAGE_TAGS_ARR[@]}; do
        if [[ -z "$${shell_tag_iter_var}" || "$${shell_tag_iter_var}" == "latest" ]]; then
          continue
        fi
        SHELL_SHOULD_KEEP_BOOL=false # Bash variable
        for shell_keep_tag_var in $${ACTIVE_REVISION_TAGS_UNIQUE_ARR[@]}; do
          if [[ "$${shell_tag_iter_var}" == "$${shell_keep_tag_var}" ]]; then
            SHELL_SHOULD_KEEP_BOOL=true
            break
          fi
        done

        if ! $${SHELL_SHOULD_KEEP_BOOL}; then
          echo "Deleting image tag: europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:$${shell_tag_iter_var}"
          yes | gcloud artifacts docker images delete "europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:$${shell_tag_iter_var}" --delete-tags --quiet # Added --delete-tags for clarity, though it's default for specific tags
        fi
      done
    else
      echo "Skipping cleanup of old revisions and image tags as _KEEP is not greater than 0."
    fi

substitutions:
  _GCP_REGION: europe-west6
  _TRADING_MODE: paper # Default, can be overridden by --substitutions
  _KEEP: "3" # Number of active/recent revisions and corresponding image tags to keep

timeout: "1200s" # 20 minutes