# ===================================================================
# == RECOMMENDED VERSION: cloud-run/application/cloudbuild.yaml
# == WITH INTEGRATED TESTING AND CHECKS
# ===================================================================

steps:
  # 步骤 1: 拉取最新的 base 镜像
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Pull-Latest-Base'
    args: ['pull', 'europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/base:latest']

  # 步骤 2: 构建 application 镜像
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build-Application'
    args:
      - 'build'
      - '--build-arg'
      - 'BASE_IMAGE_URL=europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/base:latest'
      - '--tag'
      - 'europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${_MY_IMAGE_TAG}'
      - 'cloud-run/application'
      - '--file'
      - 'cloud-run/application/Dockerfile'
    waitFor: ['Pull-Latest-Base']

  # 步骤 3: 推送 application 镜像
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push-Application'
    args: ['push', 'europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${_MY_IMAGE_TAG}']
    waitFor: ['Build-Application']

  # --- 新增的检测和初始化步骤 ---

  # 步骤 4: 运行依赖安全检查
  - name: "gcr.io/cloud-builders/docker"
    id: "Safety-Check"
    entrypoint: "bash"
    args:
    - "-c"
    - "docker run --rm europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${_MY_IMAGE_TAG} bash -c 'pip install safety && safety check --bare'"
    # 注意：我移除了 '|| true'，如果发现漏洞，构建将失败。如果想改为警告，请加回 '|| true'
    waitFor: ['Push-Application']

# ... (其他步骤) ...

  # 步骤 5: 运行单元测试
  - name: "gcr.io/cloud-builders/docker"
    id: "Unit-Tests"
    entrypoint: "bash"
    args:
    - "-c"
    - |
      # 登录 gcloud CLI 以获取应用默认凭据 (ADC)
      gcloud auth application-default login
      
      # 运行容器，并将 ADC 挂载进去
      docker run --rm \
        --volume /root/.config/gcloud:/root/.config/gcloud \
        --env "GOOGLE_APPLICATION_CREDENTIALS=/root/.config/gcloud/application_default_credentials.json" \
        --env "PROJECT_ID=${PROJECT_ID}" \
        --env "TRADING_MODE=${_TRADING_MODE}" \
        --entrypoint python \
        europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${_MY_IMAGE_TAG} \
        -m unittest discover -p "test_*.py"
    waitFor: ['Push-Application']

# ... (其他步骤) ...

  # 步骤 6: 初始化 Firestore 配置
  - name: 'python:3.9-slim'
    id: "Initialize-Firestore"
    entrypoint: 'bash'
    args:
    - -c
    - |
      set -e
      echo "Initializing Firestore configuration for project ${PROJECT_ID}..."
      pip install --quiet google-cloud-firestore
      python cloud-run/application/app/lib/init_firestore.py "${PROJECT_ID}"
      echo "Firestore initialization complete."
    # 这个步骤可以独立进行，但放在集成测试前确保环境就绪
    waitFor: ['Push-Application']

  # 步骤 7: 运行集成测试
  - name: "gcr.io/cloud-builders/docker"
    id: "Integration-Tests"
    entrypoint: "bash"
    args:
    - "-c"
    - |
      docker run --rm \
        --env "PYTHONPATH=/home" \
        --env "PROJECT_ID=${PROJECT_ID}" \
        --env "TRADING_MODE=${_TRADING_MODE}" \
        --env "K_REVISION=cloudbuild" \
        --entrypoint bash \
        europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${_MY_IMAGE_TAG} \
        -c "/usr/bin/Xvfb :0 -ac -screen 0 1024x768x16 +extension RANDR & export DISPLAY=:0 && python ./_tests/integration_tests.py"
    waitFor: ['Initialize-Firestore'] # 确保在 Firestore 初始化后运行

  # --- 检测结束 ---

  # 步骤 8: 部署到 Cloud Run (只有在所有检查都通过后才会执行)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Deploy-to-Cloud-Run'
    args:
      - 'run'
      - 'deploy'
      - 'ib-${_TRADING_MODE}'
      - '--image'
      - 'europe-docker.pkg.dev/${PROJECT_ID}/cloud-run-repo/application:${_MY_IMAGE_TAG}'
      - '--region'
      - '${_GCP_REGION}'
      - '--platform'
      - 'managed'
      - '--max-instances'
      - '1'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--service-account'
      - 'ib-trading@${PROJECT_ID}.iam.gserviceaccount.com'
      - '--no-allow-unauthenticated' # 确保服务是私有的
      - '--set-env-vars=PROJECT_ID=${PROJECT_ID},TRADING_MODE=${_TRADING_MODE}'
    waitFor:
      - 'Safety-Check'
      - 'Unit-Tests'
      - 'Integration-Tests'

# 替换变量
substitutions:
  _GCP_REGION: asia-east1
  _TRADING_MODE: paper
  _MY_IMAGE_TAG: "latest"

timeout: "1800s" # 增加了超时时间以适应更多的测试步骤